//
// Generated file, do not edit! Created by nedtool 5.1 from src/messages/ContentRequest.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __CONTENTREQUEST_M_H
#define __CONTENTREQUEST_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/messages/WaveShortMessage_m.h"
#include "VectorWrapper.h"
// }}

/**
 * Class generated from <tt>src/messages/ContentRequest.msg:8</tt> by nedtool.
 * <pre>
 * packet ContentRequest extends WaveShortMessage
 * {
 *     string carId;
 *     int currentRoad;
 *     VectorWrapper plannedRoadIds;
 * 
 * 
 * 
 * 
 * }
 * </pre>
 */
class ContentRequest : public ::WaveShortMessage
{
  protected:
    ::omnetpp::opp_string carId;
    int currentRoad;
    VectorWrapper plannedRoadIds;

  private:
    void copy(const ContentRequest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ContentRequest&);

  public:
    ContentRequest(const char *name=nullptr, short kind=0);
    ContentRequest(const ContentRequest& other);
    virtual ~ContentRequest();
    ContentRequest& operator=(const ContentRequest& other);
    virtual ContentRequest *dup() const override {return new ContentRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getCarId() const;
    virtual void setCarId(const char * carId);
    virtual int getCurrentRoad() const;
    virtual void setCurrentRoad(int currentRoad);
    virtual VectorWrapper& getPlannedRoadIds();
    virtual const VectorWrapper& getPlannedRoadIds() const {return const_cast<ContentRequest*>(this)->getPlannedRoadIds();}
    virtual void setPlannedRoadIds(const VectorWrapper& plannedRoadIds);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ContentRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ContentRequest& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CONTENTREQUEST_M_H

